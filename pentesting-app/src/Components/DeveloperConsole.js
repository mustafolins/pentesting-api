import React, { Component } from 'react'
import request from "request";

export default class DeveloperConsole extends Component {
    constructor(props) {
        super(props)

        // set up state variables
        this.state = {
            sourceCode: '',
            output: '',
            autoScroll: true
        }

        // bind functions 
        this.sendInput = this.sendInput.bind(this)
        this.onCodeChanged = this.onCodeChanged.bind(this)
        this.getCurrentOutput = this.getCurrentOutput.bind(this)
        this.recievedCurrentOutput = this.recievedCurrentOutput.bind(this)
    }

    componentDidMount() {
        // set up timer to continually get new developer output
        this.getOutputTimer = setInterval(() => {
            this.getCurrentOutput()
        }, 1000);
    }

    componentWillUnmount() {
        // clear interval
        clearInterval(this.getOutputTimer)
    }

    /**
     * Gets the current output of the developer input.
     */
    getCurrentOutput() {
        // get the latest developer output
        request(
            {
                url: `${this.props.baseAddress}api/ScriptEngine/Output/${this.props.clientId}`,
                method: 'GET'
            },
            this.recievedCurrentOutput
        )
    }

    /**
     * Updates the output state if the request was successful.
     * @param {*} error Error from request if any.
     * @param {*} response The response of the http request.
     * @param {*} body The body of the response.
     */
    recievedCurrentOutput(error, response, body) {
        // if current input request is successful then
        if (!error && response.statusCode === 200) {
            if (body.length > 0) {
                // add output to state
                this.setState(
                    {
                        output: this.state.output + '\n' + body
                    })
    
                // auto scroll new 
                if (this.state.autoScroll) {
                    document.getElementById('Dummy-Div-Dev-Output').scrollIntoView({ behavior: "smooth" })
                }
            }
        }
    }

    /**
     * Sends sourceCode to the reverse http shell.
     */
    sendInput() {
        // put the sourceCode to the reverse shell
        fetch(`${this.props.baseAddress}api/ScriptEngine/${this.props.clientId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                "id": this.props.clientId,
                "input": this.state.sourceCode
            })
        })
    }

    /**
     * Updates the source code state variable on change of the text area.
     */
    onCodeChanged(){
        // get source code from text area
        var text = document.getElementById('SourceCode').value
        // set state of source code
        this.setState({
            sourceCode: text
        })
    }

    render() {
        return (
            <div className='Console'>
                <strong>Developer Console</strong> <br />
                <button onClick={this.sendInput}>Send</button> <br />
                <hr />
                <textarea className='Source-Code' id='SourceCode' rows='15' cols='83' onChange={this.onCodeChanged}></textarea>
                <hr />
                <pre className="Script-Console-Output">
                    {this.state.output}
                    <div id='Dummy-Div-Dev-Output'></div>
                </pre>
            </div>
        )
    }
}
