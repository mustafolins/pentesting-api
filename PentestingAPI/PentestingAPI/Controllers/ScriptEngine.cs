using Microsoft.AspNetCore.Mvc;
using PentestingCommon;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace PentestingAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ScriptEngine : ControllerBase
    {
        public static SortedDictionary<int, string> Scripts { get; set; }
        public static SortedDictionary<int, string> ScriptOutputs { get; set; }

        public ScriptEngine()
        {
            // create scripts dictionary if it doesn't exist
            if (Scripts == null)
            {
                Scripts = new SortedDictionary<int, string>();
            }
            // create script outputs dictionary if it doesn't exist
            if (ScriptOutputs == null)
            {
                ScriptOutputs = new SortedDictionary<int, string>();
            }
        }

        // GET: api/<ScriptEngine>
        [HttpGet]
        public IEnumerable<string> Get()
        {
            throw new NotImplementedException();
        }

        // GET api/<ScriptEngine>/5
        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            // return no content status fif script doesn't exist
            if (!Scripts.ContainsKey(id))
            {
                return NoContent();
            }

            // get script
            var script = Scripts[id];
            Scripts[id] = null;
            // return script 
            return Ok(script);
        }

        // GET api/<ScriptEngine>/Output/5
        [HttpGet("Output/{id}")]
        public IActionResult GetOutput(int id)
        {
            // return no content status fif script doesn't exist
            if (!ScriptOutputs.ContainsKey(id))
            {
                return NoContent();
            }

            // get script
            var script = ScriptOutputs[id];
            ScriptOutputs[id] = null;
            // return script 
            return Ok(script);
        }

        // POST api/<ScriptEngine>
        [HttpPost]
        public IActionResult Post([FromBody] StandardOutputObject standardOutput)
        {
            // if key exists update it
            if (ScriptOutputs.ContainsKey(standardOutput.Id))
            {
                ScriptOutputs[standardOutput.Id] = standardOutput.Output;
            }
            // otherwise add one
            else
            {
                ScriptOutputs.Add(standardOutput.Id, standardOutput.Output);
            }
            return Ok();
        }

        // PUT api/<ScriptEngine>/5
        [HttpPut("{id}")]
        public IActionResult Put(int id, [FromBody] StandardInputObject standardInput)
        {
            // if key exists update it
            if (Scripts.ContainsKey(id))
            {
                Scripts[id] = standardInput.Input;
            }
            // otherwise add one
            else
            {
                Scripts.Add(id, standardInput.Input);
            }
            return Ok();
        }

        // DELETE api/<ScriptEngine>/5
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            // return no content status fif script doesn't exist
            if (!Scripts.ContainsKey(id))
            {
                return NoContent();
            }

            // remove script
            Scripts.Remove(id);
            // return script id that was removed
            return Ok(id);
        }
    }
}
