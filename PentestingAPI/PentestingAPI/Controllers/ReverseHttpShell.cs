using Microsoft.AspNetCore.Mvc;
using PentestingCommon;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace PentestingAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ReverseHttpShell : ControllerBase
    {
        public static SortedDictionary<int, StringBuilder> Outputs { get; set; }
        public static SortedDictionary<int, StringBuilder> Commands { get; set; }

        public ReverseHttpShell()
        {
            // create outputs dictionary if it doesn't exist
            if (Outputs == null)
            {
                Outputs = new SortedDictionary<int, StringBuilder>();
            }
            // create commands dictionary if it doesn't exist
            if (Commands == null)
            {
                Commands = new SortedDictionary<int, StringBuilder>();
            }
        }

        // GET: api/<ReverseHttpShell>
        [HttpGet("{id}")]
        public bool Get(int id)
        {
            // if there is no output then it should be removed
            return Outputs.ContainsKey(id);
        }

        // GET api/<ReverseHttpShell>/5
        [HttpGet("{id}/{isServer}")]
        public IActionResult Get(int id, bool isServer)
        {
            if (isServer)
            {
                // return no content status if output doesn't exist
                if (!Outputs.ContainsKey(id))
                {
                    return NoContent();
                }

                // get the current output
                var output = Outputs[id].ToString();
                // clear output
                Outputs[id].Clear(); // todo: maybe this shouldn't be cleared until requested?
                // return output
                return Ok(output);
            }
            else
            {
                // return no content status if command doesn't exist
                if (!Commands.ContainsKey(id))
                {
                    return NoContent();
                }

                // get the current command
                var command = Commands[id].ToString();
                // clear output
                Commands[id].Clear();
                // return output
                return Ok(command);
            }
        }

        // POST api/<ReverseHttpShell>
        [HttpPost]
        public void Post([FromBody] StandardOutputObject standardOutput)
        {
            // update output if key exists
            if (Outputs.ContainsKey(standardOutput.Id))
            {
                Outputs[standardOutput.Id].AppendLine(standardOutput.Output);
            }
            // key doesn't exist so add output
            else
            {
                Outputs.Add(standardOutput.Id, new StringBuilder(standardOutput.Output));
            }
            Ok();
        }

        // PUT api/<ReverseHttpShell>/5
        [HttpPut("{id}")]
        public void Put(int id, [FromBody] StandardInputObject standardInput)
        {
            // update command if key exists
            if (Commands.ContainsKey(id))
            {
                Commands[id].AppendLine(standardInput.Input);
            }
            // key doesn't exist so add command
            else
            {
                Commands.Add(id, new StringBuilder(standardInput.Input + "\n"));
            }
            Ok();
        }

        // DELETE api/<ReverseHttpShell>/5
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var success = false;
            // remove command
            if (Commands.ContainsKey(id))
            {
                // remove output
                Commands.Remove(id);
                success = true;
            }
            // remove output
            if (Outputs.ContainsKey(id))
            {
                // remove output
                Outputs.Remove(id);
                success = true;
            }

            if (!success)
            {
                return NoContent();
            }
            else
            {
                // return shell id that was removed
                return Ok(id);
            }
        }
    }
}
